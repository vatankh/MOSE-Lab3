
<!--<project name="Web3Lab" default="build" basedir=".">-->
<!--    <taskdef resource="net/sf/antcontrib/antcontrib.properties">-->
<!--        <classpath>-->
<!--            <pathelement location="lib/ant-contrib-1.0b3.jar"/>-->
<!--        </classpath>-->
<!--    </taskdef>-->
<!--    &lt;!&ndash; Load properties &ndash;&gt;-->
<!--    <property file="build.properties"/>-->

<!--    &lt;!&ndash; Define classpath &ndash;&gt;-->
<!--    <path id="classpath">-->
<!--        <fileset dir="${lib.dir}" includes="*.jar"/>-->
<!--        <pathelement location="${jsf.api.jar}"/>-->
<!--        <pathelement location="${jsf.impl.jar}"/>-->
<!--        <pathelement location="${annotation.jar}"/>-->
<!--        <pathelement location="${postgresql.jar}"/>-->
<!--        <pathelement location="${inject.jar}"/>-->
<!--        <pathelement location="${validation.api.jar}"/>-->
<!--        <pathelement location="${eclipselink.jar}"/>-->
<!--        <pathelement location="${checker.qual.jar}"/>-->
<!--        <pathelement location="${jve.api.jar}"/>-->
<!--        <pathelement location="${lombok.jar}"/>-->
<!--        <pathelement location="${jsch.jar}"/>-->
<!--        <pathelement location="${cdi.jar}"/>-->
<!--        <pathelement location="${junit.jar}"/>-->
<!--        <pathelement location="${hamcrest.jar}"/>-->
<!--        <pathelement location="${resources.dir}"/> &lt;!&ndash; Add resources to classpath &ndash;&gt;-->
<!--    </path>-->

<!--    &lt;!&ndash; Target to clean build directory &ndash;&gt;-->
<!--    <target name="clean">-->
<!--        <echo message="***** Cleaning build directory *****"/>-->
<!--        <delete dir="${build.dir}"/>-->
<!--        <delete dir="${test.classes.dir}"/>-->

<!--        <echo message="***** Clean complete *****"/>-->
<!--    </target>-->

<!--    &lt;!&ndash; Target to compile source code &ndash;&gt;-->
<!--    <target name="compile" depends="clean">-->
<!--        <mkdir dir="${classes.dir}"/>-->
<!--        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false" source="1.8" target="1.8"/>-->
<!--        <echo message="***** Compilation complete *****"/>-->
<!--    </target>-->

<!--    &lt;!&ndash; Target to create the JAR file &ndash;&gt;-->
<!--    <target name="build" depends="compile">-->
<!--        <echo message="***** Building JAR file *****"/>-->
<!--        <mkdir dir="${build.dir}/jar"/>-->
<!--        <jar destfile="${build.dir}/${j}/${proj.name}" basedir="${classes.dir}">-->
<!--            <manifest>-->
<!--                <attribute name="Manifest-Version" value="1.0"/>-->
<!--                <attribute name="Created-By" value="vatan"/>-->
<!--            </manifest>-->
<!--        </jar>-->
<!--        <echo message="***** JAR build complete *****"/>-->
<!--    </target>-->

<!--    &lt;!&ndash; Target to create the WAR file and include the JAR &ndash;&gt;-->
<!--    <target name="build-war" depends="build">-->
<!--        <mkdir dir="${build.dir}/war"/>-->

<!--        &lt;!&ndash; Creating the WAR file &ndash;&gt;-->
<!--        <war destfile="${build.dir}/war/Web3Lab.war" webxml="src/main/webapp/WEB-INF/web.xml">-->

<!--            <classes dir="${classes.dir}"/> &lt;!&ndash; Ensure compiled classes are added &ndash;&gt;-->

<!--            &lt;!&ndash; Add compiled classes &ndash;&gt;-->
<!--            <fileset dir="${classes.dir}"/>-->

<!--            &lt;!&ndash; Add web resources (JSF pages, static resources) &ndash;&gt;-->
<!--            <fileset dir="src/main/webapp">-->
<!--                <exclude name="WEB-INF/web.xml"/>-->
<!--            </fileset>-->

<!--            &lt;!&ndash; Include the JAR file we built earlier &ndash;&gt;-->
<!--            <fileset dir="${build.dir}/jar" includes="Web3Lab.jar"/>-->

<!--            &lt;!&ndash; Include JSF libraries in the WAR's lib directory &ndash;&gt;-->
<!--            <lib dir="${lib.dir}" includes="jsf-api-2.2.20.jar, jsf-impl-2.2.18.jar, primefaces-8.0.jar, postgresql-42.7.2.jar, validation-api-1.1.0.Final.jar, javax.annotation-api-1.2.jar, javax.inject-1.jar, eclipselink-3.0.0-M1.jar, checker-qual-3.42.0.jar, jsch-0.1.55.jar, cdi-api-2.0.jar"/>-->
<!--            <fileset dir="${resources.dir}" includes="META-INF/beans.xml"/>-->

<!--        </war>-->


<!--        <echo message="***** WAR build complete *****"/>-->
<!--    </target>-->

<!--    <target name="test" depends="build">-->
<!--        <echo message="***** Running JUnit Tests *****"/>-->

<!--        &lt;!&ndash; Create directory for compiled test classes &ndash;&gt;-->
<!--        <mkdir dir="${test.classes.dir}"/>-->

<!--        &lt;!&ndash; Compile the test classes &ndash;&gt;-->
<!--        <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" classpathref="classpath">-->
<!--            &lt;!&ndash; Include compiled main classes in the classpath &ndash;&gt;-->
<!--            <classpath>-->
<!--                <path refid="classpath"/>-->
<!--                <pathelement location="${classes.dir}"/> &lt;!&ndash; Include main compiled classes &ndash;&gt;-->
<!--            </classpath>-->
<!--        </javac>-->

<!--        &lt;!&ndash; Run the tests using JUnit &ndash;&gt;-->
<!--        <junit printsummary="on" haltonfailure="yes" fork="true">-->
<!--            <classpath>-->
<!--                <path refid="classpath"/>-->
<!--                <pathelement location="${classes.dir}"/> &lt;!&ndash; Include main compiled classes &ndash;&gt;-->
<!--                <pathelement location="${test.classes.dir}"/> &lt;!&ndash; Include test compiled classes &ndash;&gt;-->
<!--            </classpath>-->
<!--            <batchtest>-->
<!--                <fileset dir="${test.classes.dir}">-->
<!--                    <include name="**/*Test.class"/>-->
<!--                </fileset>-->
<!--            </batchtest>-->
<!--            <formatter type="plain"/>-->
<!--            <formatter type="xml"/>-->
<!--        </junit>-->

<!--        <echo message="***** Tests Complete *****"/>-->
<!--    </target>-->

    <target name="scp" depends="build" >
        <echo>Sending..</echo>
        <scp file="${build.dir}/${j}/${proj.name}"
             todir="s291834@se.ifmo.ru:~/scp/"
             password="RBTk>0502" trust="true" port="2222"/>
        <echo>Sending success!</echo>
    </target>

<!--    <target name="xml">-->
<!--        <echo message="***** XML Validation STARTED *****"/>-->

<!--        &lt;!&ndash; Validate all XML files in the webapp/WEB-INF and resources directories &ndash;&gt;-->
<!--        <xmlvalidate lenient="true">-->
<!--            &lt;!&ndash; Include XML files in the WEB-INF folder &ndash;&gt;-->
<!--            <fileset dir="${xml.dir}">-->
<!--                <include name="**/*.xml"/>-->
<!--            </fileset>-->

<!--        </xmlvalidate>-->

<!--        <echo message="***** XML Validation COMPLETED *****"/>-->
<!--    </target>-->

<!--    <target name="doc" depends="build" >-->
<!--        &lt;!&ndash; Delete previous documentation build directory if it exists &ndash;&gt;-->
<!--        <delete dir="${build.doc.dir}"/>-->

<!--        &lt;!&ndash; Create directories for temporary files and documentation &ndash;&gt;-->
<!--        <mkdir dir="${build.tmp.dir}"/>-->
<!--        <mkdir dir="${build.doc.dir}"/>-->

<!--        &lt;!&ndash; Compute MD5 checksum &ndash;&gt;-->
<!--        <checksum file="${build.dir}/${j}/${proj.name}" algorithm="MD5" property="md5"/>-->

<!--        &lt;!&ndash; Compute SHA-1 checksum &ndash;&gt;-->
<!--        <checksum file="${build.dir}/${j}/${proj.name}" algorithm="SHA-1" property="sha1"/>-->

<!--        &lt;!&ndash; Generate Javadoc for all Java classes &ndash;&gt;-->
<!--        <javadoc destdir="${build.doc.dir}" classpathref="classpath" sourcepath="${src.dir}">-->
<!--            <fileset dir="${src.dir}">-->
<!--                <include name="**/*.java"/>-->
<!--            </fileset>-->
<!--        </javadoc>-->

<!--        &lt;!&ndash; Update JAR with the Javadoc files and add the checksums to the MANIFEST.MF &ndash;&gt;-->
<!--        <jar destfile="${build.dir}/${j}/${proj.name}" update="true" basedir="${build.doc.dir}">-->
<!--            &lt;!&ndash; Add Javadoc files &ndash;&gt;-->
<!--            <fileset dir="${build.doc.dir}">-->
<!--                <include name="**/*.html"/>-->
<!--            </fileset>-->
<!--            &lt;!&ndash; Add MD5 and SHA-1 checksums to the manifest &ndash;&gt;-->
<!--            <manifest>-->
<!--                <attribute name="SHA-1" value="${sha1}"/>-->
<!--                <attribute name="MD5" value="${md5}"/>-->
<!--            </manifest>-->
<!--        </jar>-->

<!--        &lt;!&ndash;  Output SHA-1 and MD5 values to a file &ndash;&gt;-->
<!--        <echo file="output.txt">-->
<!--            SHA-1=${sha1}-->
<!--            MD5=${md5}-->
<!--        </echo>-->

<!--        <echo message="***** Documentation and Checksum Generation Complete *****"/>-->
<!--    </target>-->

<!--    <target name="diff">-->
<!--        <echo message="***** DIFF TARGET STARTED *****"/>-->

<!--        &lt;!&ndash; Get the list of modified files &ndash;&gt;-->
<!--        <exec executable="git" outputproperty="diff.output">-->
<!--            <arg value="diff"/>-->
<!--            <arg value="&#45;&#45;name-only"/>-->
<!--        </exec>-->

<!--        &lt;!&ndash; Load the exclude patterns from the file exclude_classes.txt &ndash;&gt;-->
<!--        <loadfile property="exclude.patterns" srcFile="${excluded.classes}"/>-->

<!--        &lt;!&ndash; Check if the changed files contain any patterns from exclude_classes.txt &ndash;&gt;-->
<!--        <condition property="should.commit" value="true" else="false">-->
<!--            <not>-->
<!--                <contains string="${diff.output}" substring="${exclude.patterns}"/>-->
<!--            </not>-->
<!--        </condition>-->

<!--        &lt;!&ndash; If there are changes, commit them &ndash;&gt;-->
<!--        <if>-->
<!--            <equals arg1="${should.commit}" arg2="true"/>-->
<!--            <then>-->
<!--                <exec executable="git">-->
<!--                    <arg value="commit"/>-->
<!--                    <arg value="-am"/>-->
<!--                    <arg value="Auto-commit: Changes in monitored files"/>-->
<!--                </exec>-->
<!--            </then>-->
<!--            <else>-->
<!--                <echo message="No relevant changes detected. No commit necessary."/>-->
<!--            </else>-->
<!--        </if>-->

<!--        <echo message="***** DIFF TARGET COMPLETED *****"/>-->
<!--    </target>-->

<!--    <target name="alt" depends="build" description="Creates an alternative version of the program with renamed classes and variables.">-->
<!--        <echo>***** Creating alternative version *****</echo>-->

<!--        &lt;!&ndash; Step 1: Create a new directory for the alternative version &ndash;&gt;-->
<!--        <mkdir dir="${alt.dir}/src"/>-->

<!--        &lt;!&ndash; Step 2: Copy the original source files to the new directory &ndash;&gt;-->
<!--        <copy todir="${alt.dir}/src">-->
<!--            <fileset dir="src/main/java"/>-->
<!--        </copy>-->

<!--        &lt;!&ndash; Step 3: Rename specific classes or files (use your project class names) &ndash;&gt;-->
<!--        <move file="${alt.dir}/src/${connect.todb}.java" tofile="${alt.dir}/src/Alt${connect.todb}.java"/>-->
<!--        <move file="${alt.dir}/src/${point.class}.java" tofile="${alt.dir}/src/Alt${point.class}.java"/>-->
<!--        <move file="${alt.dir}/src/${point.datebean}.java" tofile="${alt.dir}/src/Alt${point.datebean}.java"/>-->
<!--        <move file="${alt.dir}/src/${poll}.java" tofile="${alt.dir}/src/Alt${poll}.java"/>-->

<!--        &lt;!&ndash; Step 4: Use 'replace' to modify class names in the source code &ndash;&gt;-->
<!--        <replace token="${connect.todb}" value="Alt${connect.todb}">-->
<!--            <fileset dir="${alt.dir}/src" includes="**/*.java"/>-->
<!--        </replace>-->

<!--        <replace token="${point.datebean}" value="Alt${point.datebean}">-->
<!--            <fileset dir="${alt.dir}/src" includes="**/*.java"/>-->
<!--        </replace>-->

<!--        <replace token="${point.class}" value="Alt${point.class}">-->
<!--            <fileset dir="${alt.dir}/src" includes="**/*.java"/>-->
<!--        </replace>-->

<!--        <replace token="${poll}" value="Alt${poll}">-->
<!--            <fileset dir="${alt.dir}/src" includes="**/*.java"/>-->
<!--        </replace>-->

<!--        &lt;!&ndash; Rebuild the project using the alternative source files &ndash;&gt;-->
<!--        <antcall target="build">-->
<!--            <param name="src" value="${alt.dir}/src"/> &lt;!&ndash; Use the alternative source directory &ndash;&gt;-->
<!--        </antcall>-->

<!--        <echo>***** Alternative version creation complete! *****</echo>-->
<!--    </target>-->

<!--    <target name="team">-->
<!--        <mkdir dir="${team.dir}"/>-->

<!--        &lt;!&ndash; First revision (HEAD) &ndash;&gt;-->
<!--        <exec executable="svn" dir="${vcs.svn.checkout.dir}">-->
<!--            <arg line="update -r HEAD"/>-->
<!--        </exec>-->
<!--        <antcall target="build"/>-->
<!--        <move file="${build.jar}" tofile="${team.dir}/build-revision-1.jar" />-->

<!--        &lt;!&ndash; Second revision (PREV) &ndash;&gt;-->
<!--        <exec executable="svn" dir="${vcs.svn.checkout.dir}">-->
<!--            <arg line="update -r PREV"/>-->
<!--        </exec>-->
<!--        <antcall target="build"/>-->
<!--        <move file="${build.jar}" tofile="${team.dir}/build-revision-2.jar" />-->

<!--        &lt;!&ndash; Third revision (PREV) &ndash;&gt;-->
<!--        <exec executable="svn" dir="${vcs.svn.checkout.dir}">-->
<!--            <arg line="update -r PREV"/>-->
<!--        </exec>-->
<!--        <antcall target="build"/>-->
<!--        <move file="${build.jar}" tofile="${team.dir}/build-revision-3.jar" />-->

<!--        &lt;!&ndash; Fourth revision (PREV) &ndash;&gt;-->
<!--        <exec executable="svn" dir="${vcs.svn.checkout.dir}">-->
<!--            <arg line="update -r PREV"/>-->
<!--        </exec>-->
<!--        <antcall target="build"/>-->
<!--        <move file="${build.jar}" tofile="${team.dir}/build-revision-4.jar" />-->

<!--        &lt;!&ndash; Create the zip file outside the 'team.dir' directory to avoid including it in the ZIP &ndash;&gt;-->
<!--        <zip destfile="${basedir}/${team.zip}" basedir="${team.dir}" />-->

<!--        <echo message="***** Team build and zip completed *****" />-->
<!--    </target>-->















<!--</project>-->
